<!DOCTYPE html>
<html>
<head>
    <title>Zone Controller</title>
    <style>
        :root {
            --bg-color: #ffffff;
            --text-color: #333333;
            --card-bg: #ffffff;
            --card-border: #dddddd;
            --button-bg: #007AFF;
            --button-hover: #0056b3;
            --slider-bg: #007AFF;
            --slider-track: #404040;
        }

        [data-theme="dark"] {
            --bg-color: #1a1a1a;
            --text-color: #ffffff;
            --card-bg: #2d2d2d;
            --card-border: #404040;
            --button-bg: #0A84FF;
            --button-hover: #409CFF;
            --slider-bg: #0A84FF;
            --slider-track: #666666;
        }

        body { 
            font-family: -apple-system, BlinkMacSystemFont, Arial, sans-serif; 
            margin: 20px;
            background-color: var(--bg-color);
            color: var(--text-color);
            transition: background-color 0.3s, color 0.3s;
        }
        .zone-container {
            max-width: 800px;
            margin: 0 auto;
        }
        .zone-card {
            border: 1px solid var(--card-border);
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 12px;
            background-color: var(--card-bg);
        }
        .zone-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
            user-select: none;
        }
        .zone-header h2 {
            margin: 0;
            font-size: 24px;
        }
        .zone-controls {
            display: none;
            flex-direction: column;
            gap: 20px;
            margin-top: 20px;
            overflow: hidden;
            transition: max-height 0.3s ease-out;
        }
        .zone-card.expanded .zone-controls {
            display: flex;
        }
        .control-group {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .control-group label {
            min-width: 100px;
        }
        .power-button {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            padding: 0;
        }
        .power-button.on {
            background-color: #34C759;
        }
        .power-button.off {
            background-color: #FF3B30;
        }
        input[type="range"] {
            flex-grow: 1;
            height: 4px;
            -webkit-appearance: none;
            background: var(--slider-track);
            border-radius: 2px;
            outline: none;
        }
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 20px;
            height: 20px;
            background: var(--slider-bg);
            border-radius: 50%;
            cursor: pointer;
        }
        .theme-toggle {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 8px 16px;
            border-radius: 20px;
            border: none;
            background-color: var(--button-bg);
            color: white;
            cursor: pointer;
        }
    </style>
    <script>
        // Theme handling
        const theme = localStorage.getItem('theme') || 
            (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
        document.documentElement.setAttribute('data-theme', theme);

        function toggleTheme() {
            const currentTheme = document.documentElement.getAttribute('data-theme');
            const newTheme = currentTheme === 'light' ? 'dark' : 'light';
            document.documentElement.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
        }

        // Zone expansion handling
        function toggleZone(zoneId) {
            const card = document.getElementById(`zone-${zoneId}`);
            card.classList.toggle('expanded');
        }

        // Handle form submissions with AJAX
        function updateZoneAttribute(zoneId, attribute, value) {
            fetch(`/zones/${zoneId}/${attribute}/${value}`, {
                method: 'POST',
            }).then(response => {
                if (!response.ok) {
                    console.error('Failed to update zone');
                    return;
                }
                return response.json();
            }).then(zone => {
                if (!zone) return;
                
                // Update the power button state if this was a power change
                if (attribute === 'pr') {
                    const card = document.getElementById(`zone-${zoneId}`);
                    const powerButton = card.querySelector('.power-button');
                    if (value === '1') {
                        powerButton.classList.remove('off');
                        powerButton.classList.add('on');
                    } else {
                        powerButton.classList.remove('on');
                        powerButton.classList.add('off');
                    }
                    // Update the onclick handler with the new toggle value
                    powerButton.setAttribute('onclick', 
                        `event.stopPropagation(); updateZoneAttribute('${zoneId}', 'pr', '${value === '1' ? '0' : '1'}')`);
                }
            });
        }
    </script>
</head>
<body>
    <button class="theme-toggle" onclick="toggleTheme()">Toggle Theme</button>
    <div class="zone-container">
        <h1>Zone Controller</h1>
        
        #for(zone in zones):
            <div id="zone-#(zone.id)" class="zone-card">
                <div class="zone-header" onclick="toggleZone('#(zone.id)')">
                    <h2>#(zone.name)</h2>
                    <button class="power-button #if(zone.status == "on"):on#else:off#endif" 
                            onclick="event.stopPropagation(); updateZoneAttribute('#(zone.id)', 'pr', '#if(zone.status == "on"):0#else:1#endif')">
                        ‚èª
                    </button>
                </div>
                <div class="zone-controls">
                    <div class="control-group">
                        <label>Volume:</label>
                        <input type="range" min="0" max="38" value="#(zone.volume)" 
                               oninput="updateZoneAttribute('#(zone.id)', 'vo', this.value)">
                        <span>#(zone.volume)</span>
                    </div>
                    <div class="control-group">
                        <label>Balance:</label>
                        <input type="range" min="0" max="20" value="#(zone.balance)" 
                               oninput="updateZoneAttribute('#(zone.id)', 'bl', this.value)">
                        <span>#(zone.balance)</span>
                    </div>
                    <div class="control-group">
                        <label>Treble:</label>
                        <input type="range" min="0" max="14" value="#(zone.treble)" 
                               oninput="updateZoneAttribute('#(zone.id)', 'tr', this.value)">
                        <span>#(zone.treble)</span>
                    </div>
                    <div class="control-group">
                        <label>Bass:</label>
                        <input type="range" min="0" max="14" value="#(zone.bass)" 
                               oninput="updateZoneAttribute('#(zone.id)', 'bs', this.value)">
                        <span>#(zone.bass)</span>
                    </div>
                    <div class="control-group">
                        <label>Source:</label>
                        <input type="range" min="1" max="6" value="#(zone.source)" 
                               oninput="updateZoneAttribute('#(zone.id)', 'ch', this.value)">
                        <span>#(zone.source)</span>
                    </div>
                </div>
            </div>
        #endfor
    </div>
</body>
</html>
