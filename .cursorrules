# MPRAmpController - Cursor IDE Rules

## Project Overview
This is a Swift Vapor web application for controlling multi-zone amplifiers via serial communication. The target deployment is an **Intel Mac mini**, not the local development machine.

## Build & Deployment Instructions

### ‚ö†Ô∏è DO NOT RUN LOCALLY
- **DO NOT** use `swift run` or similar local execution commands
- **DO NOT** try to run the app on the development machine
- The app requires USB serial hardware that's only available on the target Intel Mac mini

### ‚úÖ ALWAYS USE BUILD SCRIPT
When building or updating the application:

```bash
# Fast incremental build (recommended)
./build-x86.sh

# Clean build when troubleshooting
./build-x86.sh --clean
```

### üì¶ Deployment Process
1. Run `./build-x86.sh` to create `binary/Run`
2. Transfer `binary/Run` to the Intel Mac mini
3. On the Mac mini: `chmod +x Run && ./Run`
4. Access web interface at `http://localhost:8080`

## Architecture Notes

### Target Platform
- **Architecture**: Intel x86_64 (not ARM/Apple Silicon)
- **Target**: Older Intel Mac mini with USB serial connection
- **Binary Location**: `binary/Run`

### Hardware Requirements
- USB serial device with "usbserial" in the device name
- Multi-zone amplifier controller connected via USB

### Software Stack
- **Backend**: Swift Vapor 4
- **Database**: SQLite (for zone names)
- **Serial**: ORSSerial framework
- **Frontend**: Leaf templates with modern JavaScript

## Automated Template Embedding

### ü§ñ Template System
- **Source Templates**: Edit `.leaf` files in `Sources/App/Resources/Views/`
- **Auto-Generated Code**: `Sources/App/Models/EmbeddedTemplates.swift` (created during build)
- **Build Integration**: `generate-embedded-templates.sh` runs automatically during build
- **Deployment**: Templates are embedded in `binary/Run` for standalone deployment

### ‚úÖ Template Development Rules
- **DO**: Edit `.leaf` files directly in `Sources/App/Resources/Views/`
- **DO**: Use `./build-x86.sh` to build with embedded templates
- **DON'T**: Edit `EmbeddedTemplates.swift` manually (auto-generated)
- **DON'T**: Try to manually sync templates with Swift code

### üìÅ Template Files
- `zones.leaf` - Main zone controller interface
- `test.leaf` - Simple test page for debugging

### üîÑ Template Workflow
1. Edit `.leaf` files in `Sources/App/Resources/Views/`
2. Run `./build-x86.sh` (templates automatically embedded)
3. Deploy `binary/Run` to Intel Mac mini

## Code Patterns

### Serial Port Handling
- Port is optional (`ORSSerialPort?`) to prevent crashes when hardware isn't connected
- Always use guard statements when accessing port
- Graceful fallback when no serial device is available

### Error Handling
- Use `FailureError` enum for serial communication errors
- Handle `noPort`, `noZone`, and `noResults` cases
- Never force unwrap serial port operations

### Zone Management
- 6 zones (IDs: 11-16) hardcoded in controller
- Custom zone names stored in SQLite database
- Real-time updates via web interface

## Development Workflow

### For Code Changes
1. Make changes to Swift code
2. Test compilation: `./build-x86.sh`
3. Deploy `binary/Run` to Intel Mac mini for testing

### For Frontend/Template Changes
1. Edit `.leaf` files in `Sources/App/Resources/Views/`
2. Build: `./build-x86.sh` (templates are automatically embedded)
3. Deploy `binary/Run` to Intel Mac mini for testing

**‚ö†Ô∏è TEMPLATE RULES:**
- **ALWAYS** edit `.leaf` files in `Sources/App/Resources/Views/`
- **NEVER** edit `Sources/App/Models/EmbeddedTemplates.swift` (auto-generated)
- Templates are automatically embedded into the binary during build

### For API Changes
1. Update `SerialController.swift` routes
2. Update frontend JavaScript if needed
3. Build and deploy: `./build-x86.sh`

## Key Files

### Build & Deployment
- `build-x86.sh` - Build script for x86 deployment with template embedding
- `generate-embedded-templates.sh` - Automated template embedding script
- `binary/Run` - Standalone deployment executable with embedded templates

### Source Code
- `Sources/App/Controllers/SerialController.swift` - Main API controller
- `Sources/App/configure.swift` - App configuration with template fallback system

### Templates (EDIT THESE)
- `Sources/App/Resources/Views/zones.leaf` - Main zone controller interface
- `Sources/App/Resources/Views/test.leaf` - Test page for debugging

### Auto-Generated (DON'T EDIT)
- `Sources/App/Models/EmbeddedTemplates.swift` - Auto-generated template embeddings

### Documentation
- `README.md` - Project documentation with template workflow
- `EMBEDDED_TEMPLATES.md` - Detailed template system documentation
- `binary/README.md` - Deployment documentation

## Remember

üéØ **Always target Intel Mac mini deployment, never local execution**
üìù **Always edit .leaf templates directly - they're automatically embedded during build**
üö´ **Never edit EmbeddedTemplates.swift manually - it's auto-generated**
üîÑ **Use ./build-x86.sh for all builds - includes automated template embedding** 