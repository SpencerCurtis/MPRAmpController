#!/bin/bash

# Generate EmbeddedTemplates.swift from actual Leaf template files
# This ensures the embedded templates are always in sync with the source files

set -e

VIEWS_DIR="Sources/App/Resources/Views"
OUTPUT_FILE="Sources/App/Models/EmbeddedTemplates.swift"

echo "🔄 Generating embedded templates from $VIEWS_DIR..."

# Check if views directory exists
if [ ! -d "$VIEWS_DIR" ]; then
    echo "❌ Views directory not found: $VIEWS_DIR"
    exit 1
fi

# Start writing the Swift file
cat > "$OUTPUT_FILE" << 'EOF'
import Foundation

/// Contains embedded Leaf templates as strings for bundling into the binary
/// This file is automatically generated by generate-embedded-templates.sh
/// DO NOT EDIT MANUALLY - your changes will be overwritten!
struct EmbeddedTemplates {
    
EOF

# Function to escape Swift string content
escape_swift_string() {
    local content="$1"
    # Use sed to escape backslashes and quotes, but preserve the content structure
    echo "$content" | sed 's/\\/\\\\/g'
}

# Function to convert filename to Swift property name
filename_to_property() {
    local filename="$1"
    # Remove .leaf extension and convert to camelCase
    echo "${filename%.leaf}" | sed 's/-/_/g'
}

# Process each .leaf file
for leaf_file in "$VIEWS_DIR"/*.leaf; do
    if [ -f "$leaf_file" ]; then
        filename=$(basename "$leaf_file")
        property_name=$(filename_to_property "$filename")
        
        echo "📄 Processing $filename -> $property_name"
        
        # Read the file content
        content=$(cat "$leaf_file")
        
        # Add the property to the Swift file
        cat >> "$OUTPUT_FILE" << EOF
    /// The $filename template
    static let $property_name = #"""
$content
"""#
    
EOF
    fi
done

# Add the createTempViewsDirectory function
cat >> "$OUTPUT_FILE" << 'EOF'
    /// Creates the embedded templates as files in a temporary directory
    /// - Returns: The path to the temporary views directory
    static func createTempViewsDirectory() throws -> String {
        let tempDir = NSTemporaryDirectory()
        let viewsDir = tempDir + "MPRAmpController_Views"
        
        // Create Views directory
        let fileManager = FileManager.default
        try fileManager.createDirectory(atPath: viewsDir, withIntermediateDirectories: true, attributes: nil)
        
        // Write templates to files
EOF

# Add file writing code for each template
for leaf_file in "$VIEWS_DIR"/*.leaf; do
    if [ -f "$leaf_file" ]; then
        filename=$(basename "$leaf_file")
        property_name=$(filename_to_property "$filename")
        
        cat >> "$OUTPUT_FILE" << EOF
        let ${property_name}Path = viewsDir + "/$filename"
        try $property_name.write(toFile: ${property_name}Path, atomically: true, encoding: .utf8)
EOF
    fi
done

# Finish the function and struct
cat >> "$OUTPUT_FILE" << 'EOF'
        
        print("📁 Created embedded templates in: \(viewsDir)")
        return viewsDir
    }
}
EOF

echo "✅ Generated $OUTPUT_FILE with embedded templates"
echo "📊 Template files processed:"
ls -la "$VIEWS_DIR"/*.leaf | awk '{print "   📄 " $9 " (" $5 " bytes)"}' 